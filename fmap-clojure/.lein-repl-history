(use 'fmap-clojure.core :reload)
(star-channel "a" inc 1)
(star-channel "a" inc [1])
(use 'fmap-clojure.core :reload)
(star-channel "a" inc [1])
(use 'fmap-clojure.core :reload)
(star-channel "a" inc [1])
(use 'fmap-clojure.core :reload)
(star-channel "a" inc [1])
(use 'fmap-clojure.core :reload)
(star-channel "a" inc [1])
(use 'fmap-clojure.core :reload)
(star-channel "a" inc [1])
(use 'fmap-clojure.core :reload)
(star-channel "a" inc [1])
(use 'fmap-clojure.core :reload)
(star-channel "a" inc [1])
(use 'fmap-clojure.core :reload)
(star-channel "a" inc [1])
(use 'fmap-clojure.core :reload)
(star-channel "a" inc [1])
(use 'fmap-clojure.core :reload)
(star-channel "a" inc [1])
(use 'fmap-clojure.core :reload)
(star-channel "a" inc [1])
(use 'fmap-clojure.core :reload)
(star-channel "a" inc [1])
(use 'fmap-clojure.core :reload)
(star-channel "a" inc [1])
(use 'fmap-clojure.core :reload)
(star-channel "a" inc [1])
(use 'fmap-clojure.core :reload)
(star-channel "a" inc [1])
(use 'fmap-clojure.core :reload)
(star-channel "a" inc [1])
(use 'fmap-clojure.core :reload)
(star-channel "a" inc 1)
(use 'fmap-clojure.core :reload)
(star-channel "a" inc 1)
(use 'fmap-clojure.core)
(use 'fmap-clojure.core :reload)
(import 'java.io.FileInputStream)
(import 'java.io.File)
(def fin (FileInputStream. (File. "/tmp/test.txt")))
(def shareio (IO fin))
shareio
(fmap shareio #(.read %))
shared-io-star-chan 
(use 'fmap-clojure.core)
(<*> [inc] [1])
(use 'fmap-clojure.core)
(<*> [inc] [1 [1 2 3 4]])
(use 'fmap-clojure.core)
(<*> [inc] [1 [1 2 3 4]])
(<*> [inc] [1 2 3 4])
(<*> [inc] [1])
(<*> [inc] [1 [1 2 3 4]])
